name: MacOS Root Execution
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.FINE_GRAINED_PAT }}

      - name: Install dependencies
        run: |
          brew install cloudflared
          brew install jq

      - name: Configure and start SSH server
        run: |
          # Mengkonfigurasi SSH dan mengatur password untuk root
          echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config
          echo "PasswordAuthentication yes" | sudo tee -a /etc/ssh/sshd_config
          sudo dscl . -passwd /Users/root "rifaiGG123"
          sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist

      - name: Create the script to run as root
        run: |
          # Menggunakan cat << EOF agar variabel ${GITHUB_WORKSPACE} diperluas saat skrip dibuat.
          cat << EOF > run-this.sh
          #!/bin/bash
          echo "--- Script starting, running as user: \$(whoami) ---"

          # Jalankan rustup dengan menunjuk ke instalasi milik 'runner'.
          # Ini diperlukan karena skrip ini dijalankan oleh root.
          export RUSTUP_HOME="/Users/runner/.rustup"
          export CARGO_HOME="/Users/runner/.cargo"
          echo "Setting default Rust toolchain to nightly..."
          /Users/runner/.cargo/bin/rustup default nightly

          echo "Configuring root's shell environment (.zshrc and .bashrc)..."

          # Mengkonfigurasi file shell untuk root.
          # Menggunakan 'append' (>>) agar tidak menimpa file yang ada.
          echo 'export TERM=xterm-256color' >> /var/root/.zshrc
          echo 'export TERM=xterm-256color' >> /var/root/.bashrc

          # Menggunakan variabel GITHUB_WORKSPACE untuk path yang andal.
          echo "alias workdir='cd ${GITHUB_WORKSPACE}'" >> /var/root/.zshrc
          echo "alias workdir='cd ${GITHUB_WORKSPACE}'" >> /var/root/.bashrc

          # Menambahkan path cargo milik 'runner' ke PATH milik root.
          # Tanda kutip tunggal penting untuk mencegah perluasan \$PATH secara prematur.
          echo 'export PATH="/Users/runner/.cargo/bin:\$PATH"' >> /var/root/.zshrc
          echo 'export PATH="/Users/runner/.cargo/bin:\$PATH"' >> /var/root/.bashrc

          echo "--- Configuration finished. ---"
          
          # Tambahkan perintah lain yang memerlukan root di sini
          
          EOF
          
          # Memberikan izin eksekusi pada skrip
          chmod +x run-this.sh
          
          echo "--- Content of the generated run-this.sh ---"
          cat run-this.sh
          echo "--------------------------------------------"

      - name: Run main process with root script
        continue-on-error: true
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
          CF_TUNNEL_CERT: ${{secrets.CF_CERT}}
          CF_TUNNEL_UUID: ${{secrets.CF_TUNNEL_UUID}}
          CF_TUNNEL_UUID_CONTENT: ${{secrets.CF_TUNNEL_UUID_CONTENT}}
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p ~/.cloudflared
          echo "${CF_TUNNEL_CERT}" > ~/.cloudflared/cert.pem
          touch tunnel-config.yml
          echo "${CF_TUNNEL_UUID_CONTENT}" > credentials.json
          echo "url: tcp://localhost:22" >> tunnel-config.yml
          echo "tunnel: ${CF_TUNNEL_UUID}" >> tunnel-config.yml
          echo "credentials-file: credentials.json" >> tunnel-config.yml

          start_ssh() {
            echo "Restarting SSH server..."
            sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
            sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
            echo "SSH service restarted."
          }

          run_script_as_root() {
            echo "Executing run-this.sh with sudo..."
            # Menjalankan skrip yang dibuat di langkah sebelumnya sebagai root di latar belakang.
            sudo ./run-this.sh &
            RUN_THIS_PID=$!
            echo "PID of the root script (run-this.sh): $RUN_THIS_PID"
          }
          
          start_cloudflared() {
            cloudflared tunnel --config tunnel-config.yml run ${CF_TUNNEL_UUID} &
            CLOUDFLARED_PID=$!
            echo "Cloudflare Tunnel started with PID $CLOUDFLARED_PID"
          }

          commit_and_push() {
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add -A
            git reset -- tunnel-config.yml
            git reset -- credentials.json
            
            if ! git commit -m "Auto commit every 30 seconds [no ci]" &> /dev/null ; then
              echo "No changes to commit." &> /dev/null
              return 1
            fi
            
            for i in {1..3}; do
              if git push https://x-access-token:${FINE_GRAINED_PAT}@github.com/${GITHUB_REPOSITORY}.git HEAD:main --force &> /dev/null; then
                echo "Push successful." &> /dev/null
                return 0
              else
                echo "Push failed, retrying..." &> /dev/null
                sleep 1
                git pull --rebase &> /dev/null
              fi
            done
            
            echo "Failed to push after 3 attempts." &> /dev/null
            return 1
          }
          
          delete_auto_commit_workflows() {
            workflow_ids=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs" | \
              jq '.workflow_runs[] | select(.head_commit.message | contains("Auto commit every 30 seconds")) | .id')
            for id in $workflow_ids; do
              echo "Deleting old workflow run $id" &> /dev/null
              curl -s -X DELETE -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$id" &> /dev/null
            done
          }

          create_new_workflow_run() {
            curl -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${REPO}/actions/workflows/macos.yml/dispatches" \
              -d '{"ref":"main"}'
            echo "New workflow run created."
          }

          cancel_old_workflow_runs() {
            current_run_id=$GITHUB_RUN_ID
            workflow_runs=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs?branch=main&status=in_progress")
            
            echo "$workflow_runs" | jq -r ".workflow_runs[] | select(.id != $current_run_id) | .id" | while read -r run_id; do
              echo "Cancelling old workflow run $run_id"
              curl -s -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$run_id/cancel"
            done
          }

          # --- URUTAN EKSEKUSI ---
          run_script_as_root
          start_ssh
          start_cloudflared
          
          START_TIME=$(date +%s)
          
          (sleep 30 && cancel_old_workflow_runs) &
          (sleep 20 && rm credentials.json) &
          
          while true; do
            if ! commit_and_push; then
              echo "Commit and push failed, continuing loop." &> /dev/null
            fi
            delete_auto_commit_workflows
            
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            if ! kill -0 $CLOUDFLARED_PID 2>/dev/null || [ $ELAPSED_TIME -ge 18000 ]; then
              if ! kill -0 $CLOUDFLARED_PID 2>/dev/null; then
                echo "Cloudflare Tunnel process has stopped."
              else
                echo "Workflow has been running for 5 hours."
              fi
              echo "Creating new workflow run and exiting."
              create_new_workflow_run
              exit 0
            fi
            
            sleep 30
          done

      - name: Rerun workflow on failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/macos.yml/dispatches" \
            -d '{"ref":"main"}'
          echo "Workflow rerun triggered due to failure."
